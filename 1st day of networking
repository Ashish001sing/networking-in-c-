#include<chrono>
#include<iostream>
#define ASIO_STANDALONE
#include<asio.hpp>
#include<asio/ts/buffer.hpp>
#include<asio/ts/internet.hpp>
using namespace std;
int main() {
    asio::error_code ec;
    asio::io_context context;
    asio::ip::tcp::endpoint endpoint(asio::ip::make_address("23.192.228.80", ec), 80);
    asio::ip::tcp::socket socket(context);
    socket.connect(endpoint, ec);
    if (!ec) {
        cout << "connected" << endl;
    }
    else {
        cout << "failed to connect " << ec.message() << endl;
    }
    if (socket.is_open())
    {
        string sRequest = "GET /index.html HTTP/1.1\r\n"
            "Host: example.com\r\n"
            "connection: close\r\n\r\n";
        socket.write_some(asio::buffer(sRequest.data(), sRequest.size()), ec);
        socket.wait(socket . wait_read);
        size_t bytes = socket.available();
        cout << "bytes available:" << bytes << endl;
        if (bytes > 0) {
            vector<char>vBuffer(bytes);
            socket.read_some(asio::buffer(vBuffer.data(), vBuffer.size()), ec);
            for (auto c : vBuffer)
            {
                cout << c;
             }
        }
    }
    system("pause");
    return 0;
}
